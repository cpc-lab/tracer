Ranking basics:
---------------------
TraceR requires two sets of mapping files (with some what redundant information).
Both types files provide information about mapping of global rank to jobs and
their local rank. Global rank of a server/core is simply the logical rank that
server LPs get inside CODES. It increases linearly from servers/cores connected
to one switch to another. Due to the way default server to node mapping works
within CODES, if more than one node is connected to a switch, server/cores are
distributed in a cyclic manner.

Example: Consider the following config file
MODELNET_GRP                      
{                                 
  repetitions="8             
  server="4";                    
  modelnet_dragonfly="4";        
  modelnet_dragonfly_router="1"; 
}   

Servers residing in nodes connected to the first router gets global rank 0-3,
second router gets global rank 4-7, and so on.

Now consider this case:
MODELNET_GRP                      
{                                 
  repetitions="8             
  server="8";                    
  modelnet_dragonfly="4";        
  modelnet_dragonfly_router="1"; 
}   

Servers residing in nodes connected to the first router gets global rank 0-7,
second router gets global rank 8-15, and so on.  However, there are 8 servers
but only 4 nodes, so each node hosts 2 servers.  The servers are distributed in
a cyclic manner within a router, i.e. in router 0, server 0 is on node 0, 1 is
on node 1, 2 is on node 2, 3 is node 3, 4 is on node 0, 5 is on node 1, 6 is on
node 2, and 7 is on node 3. Similar cyclic distribution is done within every
switch.

Map file requirements:
---------------------
Map files are divided into two sets: global map file and individual job files.
The global file specifies how the global rank are mapped to individual jobs and
ranks within those jobs. It is a binary file structured as sets of 3 integers: 
<global rank> <local rank> <job_id>. Typical write routine look like:

for(....)
        fwrite(&global_rank, sizeof(int), 1, binout);
        fwrite(&local_rank, sizeof(int), 1, binout);
        fwrite(&jobid, sizeof(int), 1, binout);
endfor

For each job, individual job map files are needed. A map file for a job is also a
binary file filled with a series of global ranks. The global ranks are ordered 
by using the local ranks as the key. So, if the series of integers is loaded
into an array called local_to_global, local_to_global[i] will contain the global
rank of local rank i.

Note for author: Eliminate individual job map files and make life easier for
users.

Single job mappers
------------------
def_lin_mapping.C : generate linear mapping which is also the default mapping
when no mapping is specified. If nodes per router is more than 1, then this
mapping will spread the ranks in a round-robin fashion among the nodes.

node_mapping.C : generates mapping that always places server with contiguous 
global ranks on a node. That, if there 2 servers per node, ranks 0-1 are on node
0, ranks 2-3 are on node 1, and so on.

More network specific map generators:
dfly_node_rr_mapping.C : generate node level round robin mapping.
dfly_router_rr_mapping.C : generate router level round robin mapping.

torus_block_mapping.C : generate block mapping (2^6 sized). Needs changes in
file to modify torus dims, block dims, ranks per node for any other machine.

torus_node_random_mapping.C : generate node level random mapping for torus.
dfly_node_random_mapping.C : generate node level random mapping for dragonfly or fat-tree.
router_random_mapping.C : generate router level random mapping for dragonfly or fat-tree.

Multi-job mappers
------------------
multi_job.C : 
def_lin_mapping.C : generate linear mapping which is also the default mapping
when no mapping is specified. If nodes per router is more than 1, then this
mapping will spread the ranks in a round-robin fashion among the nodes.

Commands for execution
----------------------
./def_lin_mapping <global_map_file> <space sepated #ranks in each job>
./node_mapping <global_map_file> <total ranks in the job> <nodes per router> <cores per node> <nodes to skip after>
./torus_node_random_mapping <global_map_file> <total ranks> <number of ranks per node> <number of nodes>
./dfly_node_random_mapping <global_map_file> <total ranks> <number of nodes per router> <number of ranks per node> <skip after node> <number of groups> <number of routers per group>
./router_random_mapping <global_map_file> <total ranks> <number of nodes per router> <number of ranks per node> <skip after node> <number of groups> <number of routers per group>
./dfly_node_rr_mapping <global_map_file> <total ranks> <number of nodes per router> <number of ranks per node> <skip after node> <number of groups> <number of routers per group>
./dfly_router_rr_mapping <global_map_file> <total ranks> <number of nodes per router> <number of ranks per node> <skip after node> <number of groups> <number of routers per group>
./torus_block_mapping.C <global_map_file> <total ranks in the job>

Output - 
<global_map_file> in binary format
job{0,1..} files in binary format

Example:
./def_lin_mapping global.bin 32 32 64

generates global.bin with 128 ranks, where first 32 are mapped to job0, next 32
to job1, and last 64 to job2.
Also generates job0, job1, job2 that maps ranks from these jobs to global ranks.

